---
- name: Create Nextcloud directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0777
  with_items:
    - "{{ nextcloud_data_directory }}/nextcloud"
    - "{{ nextcloud_data_directory }}/php"
    - "{{ nextcloud_data_directory }}/nginx"

- name: Create Nextcloud user on Postgres
  postgresql_user:
    name: nextcloud
    password: "{{ lookup('password', creds_direcrory +'/nextcloud/nextcloud_postgres_passwd length=32') }}"
    login_user: "{{ postgres_user }}"
    login_password: "{{ postgres_password }}"
    state: present
    login_host: 127.0.0.1

- name: Create Nextcloud database on Postgres
  postgresql_db:
    name: nextcloud
    owner: nextcloud
    login_user: "{{ postgres_user }}"
    login_password: "{{ postgres_password }}"
    state: present
    login_host: 127.0.0.1

- name: Create Docker Nextcloud network
  docker_network:
    name: nextcloud

- name: "Ensure old redis container is absent"
  docker_container:
    name: redis-nextcloud
    state: absent

- name: "Redis for Nextcloud"
  docker_container:
    name: nextcloud-redis
    image: redis:alpine
    command: redis-server --requirepass nextcloud
    purge_networks: true
    networks:
      - name: nextcloud
    restart_policy: unless-stopped

- name: Template Nextcloud php-custom.ini
  template:
    src: nextcloud/php-custom.ini
    dest: "{{ nextcloud_data_directory }}/php/php-custom.ini"

- name: Template Nextcloud php-fpm-custom.conf
  template:
    src: nextcloud/php-fpm-custom.conf
    dest: "{{ nextcloud_data_directory }}/php/php-fpm-custom.conf"

- name: Template nginx.conf
  template:
    src: nextcloud/nginx.conf
    dest: "{{ nextcloud_data_directory }}/nginx/nginx.conf"

- name: Template Nextcloud crontab file
  template:
    src: nextcloud/crontab
    dest: "{{ nextcloud_data_directory }}/crontab"
    mode: 644
    owner: root
    group: root

- name: Ensure LDAP network is present
  docker_network:
    name: ldap

- name: Nextcloud Docker Container
  docker_container:
    name: nextcloud
    image: "{{ nextcloud_image }}"
    pull: true
    volumes:
      - "{{ nextcloud_data_directory }}/nextcloud:/var/www/html:rw"
      - "{{ nextcloud_data_directory }}/php/php-custom.ini:/usr/local/etc/php/conf.d/zzz-custom.ini:ro"
      - "{{ nextcloud_data_directory }}/php/php-fpm-custom.conf:/usr/local/etc/php-fpm.d/zzz-custom.conf:ro"
      - "{{ samba_shares_root }}:/mnt/samba:rw"
    purge_networks: true
    networks:
      - name: ldap
      - name: postgres
      - name: nextcloud
    env: &nextcloud-env
      POSTGRES_HOST: "postgres"
      POSTGRES_DB: "nextcloud"
      POSTGRES_USER: "nextcloud"
      POSTGRES_PASSWORD: "{{ lookup('password', creds_direcrory +'/nextcloud/nextcloud_postgres_passwd length=32') }}"
      NEXTCLOUD_TRUSTED_DOMAINS: "nextcloud.{{ ansible_nas_domain }}"

      REDIS_HOST: "nextcloud-redis"
      REDIS_HOST_PORT: "6379"
      REDIS_HOST_PASSWORD: "nextcloud"

      NEXTCLOUD_ADMIN_USER: "internal-admin"
      NEXTCLOUD_ADMIN_PASSWORD: "{{ lookup('password', creds_direcrory +'/nextcloud/internal_admin_user_passwd length=32') }}"

      SMTP_HOST: "{{ smtp_host }}"
      SMTP_PORT: "{{ smtp_port }}"
      SMTP_NAME: "{{ smtp_username }}"
      SMTP_PASSWORD: "{{ smtp_password }}"
      SMTP_SECURE: "{{ smtp_secure }}"
      MAIL_FROM_ADDRESS: "{{ smtp_sender }}"
    restart_policy: unless-stopped
    memory: 3g

- name: Nginx for Nextcloud Docker Container
  docker_container:
    name: nextcloud-nginx
    image: nginx
    pull: true
    volumes:
      - "{{ nextcloud_data_directory }}/nextcloud:/var/www/html:ro"
      - "{{ nextcloud_data_directory }}/nginx/nginx.conf:/etc/nginx/nginx.conf"
    ports:
      - "{{ nextcloud_port }}:80"
    purge_networks: true
    networks:
      - name: nextcloud
      - name: web
    labels:
      traefik.enable: "{{ nextcloud_available_externally }}"
      traefik.http.services.nextcloud-svc.loadbalancer.server.port: "80"
      traefik.http.routers.nextcloud.rule: "Host(`nextcloud.{{ ansible_nas_domain }}`)"
      traefik.http.routers.nextcloud.middlewares: "nextcloud-headers"
      traefik.http.routers.nextcloud.tls: "true"

      traefik.http.middlewares.nextcloud-headers.headers.customFrameOptionsValue: "SAMEORIGIN"
      traefik.http.middlewares.nextcloud-headers.headers.stsSeconds: "15552000"
      traefik.http.middlewares.nextcloud-headers.headers.stsIncludeSubdomains: "true"
    restart_policy: unless-stopped
    memory: 1g

# Check if configuration needed
- name: Wait for nextcloud container initialization
  shell: "docker logs nextcloud"
  register: nc_init_result
  until: nc_init_result.stderr.find("fpm is running") != -1
  retries: 60
  delay: 3

- name: Check if nextcloud was already configured by ansible-nas
  shell: "docker exec -u www-data nextcloud php occ config:system:get configured_by_ansible_nas"
  register: nc_config_result
  failed_when: nc_config_result.rc != 1 and nc_config_result.rc != 0

# Configure basic parameters
- name: Set nextcloud configuration properties
  shell: "docker exec -u www-data nextcloud php occ config:system:set {{ item }}"
  when: nc_config_result.stdout.find("true") == -1
  with_items:
    - "overwriteprotocol --value 'https'" # traefik acts as reverse proxy
    - "trusted_proxies 0 --value '172.16.0.0/12'"
    - "csrf.optout 0 --value '/^WebDAVFS/'"
    - "csrf.optout 1 --value '/^Microsoft-WebDAV-MiniRedir/'"
    - "csrf.optout 2 --value '/KeeWeb\\/\\d+\\.\\d+\\.\\d+/'"

- name: Set nextcloud smtp password
  when: nc_config_result.stdout.find("true") == -1
  shell: "docker exec -u www-data nextcloud php occ config:system:set mail_smtppassword --value='{{ smtp_password }}'"

# Configure LDAP
- name: Install nextcloud LDAP app
  when: ldap_enabled and nc_config_result.stdout.find("true") == -1
  shell: "docker exec -u www-data nextcloud php occ app:enable user_ldap"

- name: Configure nextcloud LDAP app
  when: ldap_enabled and nc_config_result.stdout.find("true") == -1
  shell: "docker exec -u www-data nextcloud php occ config:app:set user_ldap {{ item }}"
  no_log: true
  with_items:
    - "background_sync_interval --value '43200'"
    - "s01ldap_configuration_active --value '1'"
    - "s01ldap_loginfilter_username --value '1'"
    - "s01ldap_group_filter_mode --value '0'"
    - "s01ldap_group_display_name --value 'cn'"
    - "s01ldap_host --value 'openldap'"
    - "s01ldap_port --value '389'"
    - "s01ldap_base --value '{{ ldap_base_dn }}'"
    - "s01ldap_experienced_admin --value '0'"
    - "s01ldap_dn --value 'cn=readonly,{{ ldap_base_dn }}'"
    - "s01ldap_agent_password --value '{{ lookup('password', creds_direcrory +'/ldap/ldap_readonly_passwd length=32') | b64encode }}'"
    - "s01ldap_display_name --value 'cn'"
    - "s01has_memberof_filter_support --value '1'"
    - "s01ldap_expert_username_attr --value 'uid'"
    - "s01ldap_login_filter_mode --value '0'"
    - "s01ldap_email_attr --value 'mail'"
    - "s01ldap_user_filter_mode --value '0'"
    - "s01ldap_base_users --value 'ou=users,{{ ldap_base_dn }}'"
    - "s01ldap_base_groups --value 'ou=groups,{{ ldap_base_dn }}'"
    - "s01ldap_userfilter_groups --value 'nextcloud'"
    - "s01ldap_groupfilter_objectclass --value 'groupOfUniqueNames'"
    - "s01ldap_group_filter --value '(&(|(objectclass=groupOfUniqueNames)))'"
    - "s01ldap_userfilter_objectclass --value 'inetOrgPerson'"
    - "s01ldap_group_member_assoc_attribute --value 'uniqueMember'"
    - "s01ldap_userlist_filter --value '(&(|(objectclass=inetOrgPerson))(|(memberof=cn=nextcloud,ou=groups,{{ ldap_base_dn }})))'"
    - "background_sync_prefix --value 's01'"
    - "s01ldap_loginfilter_email --value '1'"
    - "s01ldap_login_filter --value '(&(&(|(objectclass=inetOrgPerson))(|(memberof=cn=nextcloud,ou=groups,{{ ldap_base_dn }})))(|(uid=%uid)(|(mailPrimaryAddress=%uid)(mail=%uid))))'"
    - "s01use_memberof_to_detect_membership --value '1'"

# Mark configuration as done to prevent configuration by ansible next time
- name: Set 'configured_by_ansible_nas' in nextcloud
  when: nc_config_result.stdout.find("true") == -1
  shell: "docker exec -u www-data nextcloud php occ config:system:set configured_by_ansible_nas --type=boolean --value=true"

# Cron container
- name: Nextcloud Cron Docker Container
  docker_container:
    name: nextcloud-cron
    image: "{{ nextcloud_image }}"
    entrypoint: /cron.sh
    volumes:
      - "{{ nextcloud_data_directory }}/nextcloud:/var/www/html:rw"
      - "{{ nextcloud_data_directory }}/crontab:/var/spool/cron/crontabs/www-data:ro"
    purge_networks: true
    networks:
      - name: ldap
      - name: postgres
      - name: nextcloud
    env: *nextcloud-env
    restart_policy: unless-stopped
